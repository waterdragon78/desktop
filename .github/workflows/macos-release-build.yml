name: macOS Release Build

on:
  workflow_call:
    inputs:
      build-version:
        description: 'The version to build'
        required: true
        type: string
      release-branch:
        description: 'The branch to build'
        required: true
        type: string

jobs:
  mac-build:
    name: Build macOS - ${{ matrix.arch }}
    runs-on: ${{ inputs.release-branch == 'release' && 'macos-14' || 'macos-14' }}

    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup Python
        uses: actions/setup-python@v5
        # note: This will use the version defined in '.python-version' by default

      - name: Setup Git
        run: |
          git config --global user.email "mauro-balades@users.noreply.github.com"
          git config --global user.name "mauro-balades"

      - name: Install system dependencies
        run: |
          brew update
          brew install cairo sccache gnu-tar mercurial
          sudo pip install setuptools

          brew uninstall --ignore-dependencies python3.12 -f

          export PATH="$(python3 -m site --user-base)/bin":$PATH
          python3 -m pip install --user mercurial

          rm '/usr/local/bin/2to3-3.11' '/usr/local/bin/2to3-3.12' '/usr/local/bin/2to3'
          rm '/usr/local/bin/idle3.11' '/usr/local/bin/idle3.12' '/usr/local/bin/idle3'
          rm '/usr/local/bin/pydoc3.11' '/usr/local/bin/pydoc3.12' '/usr/local/bin/pydoc3'
          rm '/usr/local/bin/python3.11' '/usr/local/bin/python3.12' '/usr/local/bin/python3'
          rm '/usr/local/bin/python3.11-config' '/usr/local/bin/python3.12-config' '/usr/local/bin/python3-config'

          brew install watchman

          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.79
          source $HOME/.cargo/env

          if test "${{ matrix.arch }}" = "aarch64"; then
            rustup target add aarch64-apple-darwin
          else
            rustup target add x86_64-apple-darwin
          fi

      - name: Force usage of gnu-tar
        run: |
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"' >> ~/.zsh
          source ~/.bash_profile

      - name: Setup pnpm
        run: npm install -g pnpm

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          pnpm install

      - name: Load surfer CI setup
        run: pnpm surfer ci --brand ${{ inputs.release-branch }} --display-version ${{ inputs.build-version }}

      - name: Download Firefox source and dependencies
        run: pnpm surfer download

      - name: Bootstrap
        run: |
          cd engine
          export SURFER_PLATFORM="darwin"
          export PATH="$(python3 -m site --user-base)/bin":$PATH
          ./mach --no-interactive bootstrap --application-choice browser --no-system-changes
          cd ..

      - name: Import
        env:
          SURFER_COMPAT: ${{ matrix.arch }}
        run: pnpm surfer import --verbose

      - name: Build language packs
        run: sh scripts/download-language-packs.sh

      - name: Build Zen
        env:
          SURFER_COMPAT: ${{ matrix.arch }}
          ZEN_RELEASE_BRANCH: ${{ inputs.release-branch }}
        run: |
          export SURFER_PLATFORM="darwin"
          bash .github/workflows/src/release-build.sh
          cd ./engine/obj-${{ matrix.arch }}-apple-darwin/dist #Location of working compiled .app, compress for upload
          tar -czvf zen-${{ matrix.arch }}.tar.gz ./*.app
          mv *.tar.gz ../../../
          cd ../../../
          cd ./engine/obj-${{ matrix.arch }}-apple-darwin/instrumented/dist #Location of broken (in local testing) compiled app, I can't get it to launch but the original action uploads it so why not include it.
          mkdir "Broken Files"; cp -r *.app ./"Broken Files"; cp *.dmg ./"Broken Files"; cp zen*.zip ./"Broken Files"
          echo "These files were geenrated and uploaded in the original github action, however they do not launch based on my local testing. I thought I should upload them anyways since the original action did regardless. For a working app, use the one in zen.tar.gz" > ./"Broken Files"/readme.txt
          tar -cvzf brokenFiles-${{ matrix.arch }}.tar.gz ./"Broken Files"
          mv *.tar.gz ../../../../
          cd ../../../../
          
      - name: Upload Working Zen App
        uses: actions/upload-artifact@v4
        with:
          retention-days: 80
          name: zen-${{ matrix.arch }}.tar.gz
          path: ./zen-${{ matrix.arch }}.tar.gz
      - name: Upload Broken Zen Files
        uses: actions/upload-artifact@v4
        with:
          retention-days: 80
          name: brokenFiles-${{ matrix.arch }}.tar.gz
          path: ./brokenFiles-${{ matrix.arch }}.tar.gz
